<?php
define('ACJS_DEFAULT', 'https://www.accountchooser.com/ac.js');

function _get_expert_settings() { 
  //used to set defaults at install and in settings page
  return array(
    'chooser_run_in_reg_page' => t('Invoke chooser when the Registration Page Loads'),
    'chooser_run_in_login_block' => t('Invoke chooser when the Login Block Loads (likely on your home page)'),
    'chooser_disable_about_page' => t('Disable Account Chooser explanation shown at registration'),
  );
}

/********************************************************************************
 Function:    _get_default_branding_html
 Description: Returns a default text string that administrators can see and change
              via the module's configuration page
*/
function _get_default_branding_html() {
  $sitename = variable_get('site_name');
  return <<<EOT
  <p>$sitename uses accountchooser.com to help you remember your accounts.  Click the entry to the right to add your account to the chooser, and never type your username again.</p><p>If you don't see the entry you would like to use here, just click the <b>+Add Account</b> link go back and login the old way.  Once you're logged in, we will bring you back here to save a new entry.</p>
EOT;
}

/********************************************************************************
 Function:    _HTTPSify
 Description: Returns a guaranteed HTTPS url
 Called by:   storeaccount, _get_branding_uri
*/
function _HTTPSify($url="") {
	return preg_replace("/^http:/i", "https:", $url);
}

function _get_branding_uri() {
	//url function never returns HTTPS if invoked from an HTTP page, thus the addt'l regex. 
	$url = preg_replace("/^http:/i", "https:", url('chooser/branding', array('absolute' => TRUE, 'https' => TRUE)));
//	return preg_replace("/^http:/i", "https:", $url);
	return _HTTPSify($url);
}

function _get_uiconfig_object() {
    $branding_uri = _get_branding_uri();
    $window_title = variable_get('chooser_window_title');
    $favicon_uri = variable_get('chooser_favicon_uri');

    return "accountchooser.CONFIG.uiConfig={branding:\"$branding_uri\"". (empty($window_title)?"":",title:\"$window_title\"").(empty($favicon_uri)?"":",favicon:\"$favicon_uri\"")."};";
}

function chooser_install() {
  //set default configuration variables
  variable_set('chooser_acjs', 'ACJS');
  variable_set('chooser_supported_domains', '');
  $expertsettings = _get_expert_settings();
  variable_set('chooser_expertsettings', array());
  variable_set('chooser_window_title', variable_get('site_name').t('Chooser'));
  variable_set('chooser_branding_html', _get_default_branding_html());
}

function chooser_uninstall() {
  variable_del('chooser_acjs');
  variable_del('chooser_supported_domains');
  variable_del('chooser_expertsettings');
  variable_del('chooser_window_title');
  variable_del('chooser_branding_html');
  variable_del('chooser_favicon_uri');

}
/**
 * Implements hook_menu(). Registers user status check
 */
function chooser_menu() {
  $items['chooser/userstatus'] = array(
    'title' => 'User Status Checker',
    'page callback' => 'chooser_userstatus',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'chooser.pages.inc',
    'delivery callback' => 'drupal_json_output',
  );
  $items['chooser/branding'] = array(
    'title' => 'Test',
    'page callback' => 'chooser_branding',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'chooser.pages.inc',
  );
  $items['chooser/storeaccount'] = array(
    'page callback' => 'chooser_storeaccount',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'chooser.pages.inc',
    'access arguments' => 'user_is_logged_in',
  );
  $items['chooser/about'] = array(
    'title' => 'This site uses Account Chooser',
    'page callback' => 'chooser_explain',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'chooser.pages.inc',
  );
  $items['admin/config/user-interface/chooser'] = array(
    'title' => 'Account Chooser Settings',
    'description' => 'Settings for Account Chooser.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chooser_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * hook form alter implementation.
 */

function chooser_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "user_login_block" || $form_id == "user_login") {
    $uiconfig = _get_uiconfig_object();
    drupal_add_js('https://www.accountchooser.com/ac.js', 'external');
    drupal_add_js('accountchooser.CONFIG={loginUrl:"?q=user/login",signupUrl:"?q=user/register",userStatusUrl:"?q=chooser/userstatus",mode:"login",siteDisplayNameId:"edit-name",sitePasswordId:"edit-pass"};'.$uiconfig, 'inline');
  } 
  if ($form_id == "user_register_form") {
/*    $uiconfig = _get_uiconfig_object();
    drupal_add_js('https://www.accountchooser.com/ac.js', 'external');
    drupal_add_js('accountchooser.CONFIG={loginUrl:"?q=user/login",signupUrl:"?q=user/register",userStatusUrl:"?q=chooser/userstatus",mode:"signup",siteDisplayNameId:"edit-name",sitePasswordId:"edit-pass",siteEmailId:"edit-mail"};'.$uiconfig, 'inline');*/
	$form['#submit'][] = 'chooser_user_register_submit';
  	$form_state['redirect'] = 'chooser/about';
  }
  if ($form_id == "user_profile_form") {
	$form['#submit'][] = 'chooser_user_profile_form_submit';
  }
}

function chooser_user_register_submit($form, &$form_state) {
  //Populates an explanation after the user registers so they know to expect chooser
  $form_state['redirect'] = 'chooser/about';
}

function chooser_user_profile_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'chooser/storeaccount';
}

function chooser_user_login(&$edit, $account) {

 // if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || variable_get('chooser_destination_immediate_redirect', TRUE)) { 
    if (isset($_POST['form_id']) && $_POST['form_id'] !== 'user_pass_reset') {
      watchdog('chooser', 'Storing account from form %formid', array('%formid'  => $_POST['form_id']),WATCHDOG_NOTICE, $link = NULL);
      drupal_goto('chooser/storeaccount');
  }
}

function chooser_settings() {
  $expertsettings = _get_expert_settings();

  $form['customization'] = array(
    '#type' => 'fieldset',
    '#title' => t('Look/Feel'),
    '#description' => t('Customize what users see at AccountChooser.com. Note: any content displayed by AccountChooser.com MUST be served over HTTPS.  If SSL is not enabled for your site, only the title will work for you')
  );

 $branding_uri = _get_branding_uri();
 $form['customization']['chooser_branding_html'] = array(
    '#type' => 'textarea',
    '#title' => t('Intro Page'),
    '#default_value' => variable_get('chooser_branding_html', _get_default_branding_html()),
    '#description' => t("Small blurb within the chooser page where you can explain what is happening. Only works if you have HTTPS enabled. See exactly what will be loaded at <a href='$branding_uri'>$branding_uri</a>. Simple markup and absolute HTTPS URIs only."),
  );
  $form['customization']['chooser_window_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Override Window/Tab Title'),
    '#default_value' => variable_get('chooser_window_title'),
    '#description' => t("If left blank, AccountChooser populates the title"),
  );
  $form['customization']['chooser_favicon_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Override Chooser Favicon'),
    '#default_value' => variable_get('chooser_favicon_uri'),
    '#description' => t("Must be an absolute HTTPS URI and the hostname must match this site. If left blank, the default AccountChooser keyhole icon is displayed"),
  );

  $form['expertsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expert Settings'),
    '#description' => t('Leave these settings alone unless you know what they do.')
  );
 
  $form['expertsettings']['chooser_expertsettings'] = array(
  '#title' => t('User Experience:'),
  '#type' => 'checkboxes',
  '#options' => $expertsettings,
  '#default_value' => variable_get('chooser_expertsettings', array())
);

  $form['expertsettings']['chooser_acjs'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Chooser File Location'),
    '#default_value' => variable_get('chooser_acjs_location', 'https://www.accountchooser.com/ac.js'),

  );  

  $form['fedsettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Federation Settings'),
    '#description' => t('Federation is not yet supported in this module, so these settings are not wired in yet.')
  );
  $form['fedsettings']['chooser_supported_domains'] = array(
    '#type' => 'textarea',
    '#title' => t('Supported Domains'),
    '#rows' => 2,
    '#cols' => 30,
    '#default_value' => variable_get('chooser_supported_domains', ''),
    '#description' => t("If you want to give the user a better chance of success and you are supporting federation, enter a comma-separated list of domains, and others will not be shown."),  
  );
  return system_settings_form($form);
}

